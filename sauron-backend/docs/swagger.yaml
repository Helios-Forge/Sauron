basePath: /
definitions:
  handlers.CategoryWithRequiredStatusHierarchy:
    properties:
      child_categories:
        items:
          $ref: '#/definitions/handlers.CategoryWithRequiredStatusHierarchy'
        type: array
      created_at:
        description: Creation timestamp
        type: string
      description:
        description: Description of the category
        example: Core upper receiver components
        type: string
      id:
        description: Unique identifier for the category
        example: 1
        type: integer
      is_required:
        example: true
        type: boolean
      name:
        description: Name of the category
        example: Upper Assembly
        type: string
      parent_category:
        allOf:
        - $ref: '#/definitions/models.PartCategory'
        description: Parent category (self-referential relationship)
      parent_category_id:
        description: Parent category ID for hierarchical relationships (null for top-level
          categories)
        example: 0
        type: integer
      updated_at:
        description: Last update timestamp
        type: string
    type: object
  handlers.PartItem:
    properties:
      children:
        items:
          $ref: '#/definitions/handlers.PartItem'
        type: array
      id:
        example: upper-receiver
        type: string
      name:
        example: Upper Receiver
        type: string
    type: object
  models.FirearmModel:
    description: Firearm model information including hierarchical parts structure
    properties:
      category:
        description: Category of the firearm
        example: Rifle
        type: string
      created_at:
        description: Creation timestamp
        type: string
      description:
        description: Description of the firearm model
        example: A high-quality semi-automatic modular rifle platform.
        type: string
      id:
        description: Unique identifier for the firearm model
        example: 1
        type: integer
      images:
        description: Image URLs for the firearm model
        example:
        - '["https://example.com/images/firearms/AR-15.jpg"]'
        items:
          type: string
        type: array
      manufacturer_id:
        description: Reference to the manufacturer
        example: 1
        type: integer
      name:
        description: Name of the firearm model
        example: AR-15
        type: string
      part_categories:
        description: Related part categories through FirearmModelPartCategory
        items:
          $ref: '#/definitions/models.PartCategory'
        type: array
      price_range:
        description: Price range for the firearm model
        example: $765 - $1569
        type: string
      specifications:
        description: Specifications of the firearm
        example: '{"weight": "6.5 lbs", "caliber": "5.56x45mm NATO"}'
        type: string
      subcategory:
        description: Subcategory of the firearm
        example: Assault
        type: string
      updated_at:
        description: Last update timestamp
        type: string
      variant:
        description: Variant of the firearm model
        example: ""
        type: string
    type: object
  models.Part:
    description: Detailed information about a firearm part including compatibility
      and specifications
    properties:
      created_at:
        description: Creation timestamp
        type: string
      description:
        description: Description of the part
        example: A 30-round 5.56x45 NATO polymer magazine for AR-15 rifles.
        type: string
      dimensions:
        description: Dimensions of the part
        example: 5 x 3 x 2 in
        type: string
      id:
        description: Unique identifier for the part
        example: 1
        type: integer
      images:
        description: Image URLs for the part
        example:
        - '["https://example.com/images/parts/Standard-Charging-Handle-(AR-15).jpg"]'
        items:
          type: string
        type: array
      is_prebuilt:
        description: Whether this is a pre-built component
        example: false
        type: boolean
      manufacturer_id:
        description: Reference to the manufacturer
        example: 1
        type: integer
      name:
        description: Name of the part
        example: PMAG 30 AR/M4 GEN M3
        type: string
      part_category:
        $ref: '#/definitions/models.PartCategory'
      part_category_id:
        description: Reference to the part category
        example: 18
        type: integer
      updated_at:
        description: Last update timestamp
        type: string
      weight:
        description: Weight of the part in pounds
        example: 0.54
        type: number
    type: object
  models.PartCategory:
    description: Hierarchical structure of part categories
    properties:
      child_categories:
        description: Child categories (reverse relationship)
        items:
          $ref: '#/definitions/models.PartCategory'
        type: array
      created_at:
        description: Creation timestamp
        type: string
      description:
        description: Description of the category
        example: Core upper receiver components
        type: string
      id:
        description: Unique identifier for the category
        example: 1
        type: integer
      name:
        description: Name of the category
        example: Upper Assembly
        type: string
      parent_category:
        allOf:
        - $ref: '#/definitions/models.PartCategory'
        description: Parent category (self-referential relationship)
      parent_category_id:
        description: Parent category ID for hierarchical relationships (null for top-level
          categories)
        example: 0
        type: integer
      updated_at:
        description: Last update timestamp
        type: string
    type: object
  models.PrebuiltFirearm:
    description: Complete firearm configuration with hierarchical parts structure
    properties:
      availability:
        description: Availability status
        example: in_stock
        type: string
      compatible_parts:
        description: Compatible accessories specifically for this prebuilt configuration
        example: '{"Magazines and Feeding Devices": {"Detachable Box Magazine": {"id":
          12}}}'
        type: string
      created_at:
        description: Creation timestamp
        type: string
      description:
        description: Description of the prebuilt firearm
        example: A prebuilt M4 variant with a 14.5-inch barrel.
        type: string
      firearm_model_id:
        description: Reference to the base firearm model
        example: 1
        type: integer
      id:
        description: Unique identifier for the prebuilt firearm
        example: 1
        type: integer
      images:
        description: Image URLs for the prebuilt firearm
        example:
        - '["https://example.com/images/firearms/AR-15_prebuilt.jpg"]'
        items:
          type: string
        type: array
      name:
        description: Name of the prebuilt configuration
        example: Colt M4 Carbine
        type: string
      parts:
        description: Hierarchical structure of actual parts used in this prebuilt
          with IDs
        example: '{"Upper Assembly": {"id": 1, "sub_parts": {"Bolt Carrier Group":
          {"id": 5}}}}'
        type: string
      price:
        description: Base price of the prebuilt firearm
        example: 999.99
        type: number
      specifications:
        description: Specifications specific to this prebuilt configuration
        example: '{"weight": "6.5 lbs", "caliber": "5.56x45mm NATO"}'
        type: string
      updated_at:
        description: Last update timestamp
        type: string
    type: object
  models.ProductListing:
    description: Product listing information including pricing and availability
    properties:
      additional_info:
        description: |-
          Additional seller-specific information
          @Description JSON object containing additional product details
        example: '{"condition":"new","warranty":"lifetime","made_in_usa":true}'
        type: string
      availability:
        description: Current availability status (in_stock, out_of_stock, backorder)
        example: in_stock
        type: string
      created_at:
        description: Creation timestamp
        type: string
      currency:
        description: Currency of the price
        example: USD
        type: string
      id:
        description: Unique identifier for the product listing
        example: 1
        type: integer
      last_checked:
        description: Last time the listing was checked/updated
        type: string
      part:
        allOf:
        - $ref: '#/definitions/models.Part'
        description: Related part information if this is a part listing
      part_id:
        description: 'Optional: ID of the part if this listing is for a part'
        example: 1
        type: integer
      prebuilt_firearm:
        allOf:
        - $ref: '#/definitions/models.PrebuiltFirearm'
        description: Related prebuilt firearm information if this is a prebuilt listing
      prebuilt_id:
        description: 'Optional: ID of the prebuilt firearm if this listing is for
          a prebuilt'
        example: 1
        type: integer
      price:
        description: Current price of the product
        example: 129.99
        type: number
      seller:
        allOf:
        - $ref: '#/definitions/models.Seller'
        description: Related seller information
      seller_id:
        description: ID of the seller offering this product
        example: 1
        type: integer
      shipping_info:
        description: |-
          Shipping information
          @Description JSON object containing shipping details
        example: '{"free_shipping":true,"shipping_cost":0,"handling_time":"1-3 business
          days"}'
        type: string
      sku:
        description: Seller's SKU for the product
        example: BRN-BCG-01
        type: string
      updated_at:
        description: Last update timestamp
        type: string
      url:
        description: URL to the product on the seller's website
        example: https://www.brownells.com/products/bcg-standard
        type: string
    type: object
  models.Seller:
    description: Information about sellers who offer parts and prebuilt firearms
    properties:
      affiliate_link_template:
        description: Template for creating affiliate links (NULL if not affiliate)
        example: https://www.brownells.com/?aff=gunguru_{product_id}
        type: string
      contact_info:
        description: Contact information for the seller
        example: '{"phone": "800-741-0015", "email": "support@brownells.com"}'
        type: string
      created_at:
        description: Creation timestamp
        type: string
      description:
        description: Description of the seller
        example: A trusted retailer of firearm parts and accessories.
        type: string
      id:
        description: Unique identifier for the seller
        example: 1
        type: integer
      is_affiliate:
        description: Whether the seller is an affiliate partner
        example: false
        type: boolean
      logo_url:
        description: URL to the seller's logo
        example: https://example.com/brownells_logo.png
        type: string
      name:
        description: Name of the seller
        example: Brownells
        type: string
      updated_at:
        description: Last update timestamp
        type: string
      website_url:
        description: Website URL of the seller
        example: https://www.brownells.com
        type: string
    type: object
  models.UserSuggestion:
    description: User suggestions for new models, parts, or configurations
    properties:
      created_at:
        description: Creation timestamp
        type: string
      description:
        description: Description of the suggestion
        example: A suggestion for a long-range AR-10 configuration.
        type: string
      id:
        description: Unique identifier for the suggestion
        example: 1
        type: integer
      model_name:
        description: Name of the suggested model or configuration
        example: Custom AR-10 Build
        type: string
      status:
        description: Current status of the suggestion (pending, approved, rejected)
        example: pending
        type: string
      suggested_parts:
        description: List of suggested parts or modifications
        example: '{"Barrel": {"name": "20in 308 Barrel"}, "Stock": {"name": "Magpul
          PRS"}}'
        type: string
      updated_at:
        description: Last update timestamp
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@sauron.io
    name: Sauron API Support
    url: https://sauron.io/support
  description: A comprehensive API for firearms database management including parts,
    models, categories, product listings, and compatibility.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://sauron.io/terms/
  title: Sauron Backend API
  version: "2.0"
paths:
  /firearm-models:
    get:
      consumes:
      - application/json
      description: Get a list of all firearm models in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FirearmModel'
            type: array
      summary: Get all firearm models
      tags:
      - Firearm Models
    post:
      consumes:
      - application/json
      description: Add a new firearm model to the database
      parameters:
      - description: Firearm Model Info
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/models.FirearmModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.FirearmModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new firearm model
      tags:
      - Firearm Models
  /firearm-models/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific firearm model
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a firearm model
      tags:
      - Firearm Models
    get:
      consumes:
      - application/json
      description: Get details of a specific firearm model
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FirearmModel'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a firearm model by ID
      tags:
      - Firearm Models
    put:
      consumes:
      - application/json
      description: Update details of a specific firearm model
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Firearm Model Info
        in: body
        name: model
        required: true
        schema:
          $ref: '#/definitions/models.FirearmModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FirearmModel'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a firearm model
      tags:
      - Firearm Models
  /firearm-models/{id}/categories:
    get:
      consumes:
      - application/json
      description: Retrieves all part categories associated with a specific firearm
        model
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter by required status (true=required, false=optional, omit=both)
        in: query
        name: required
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Array of part categories with required status
          schema:
            items:
              type: object
            type: array
        "400":
          description: Invalid firearm model ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Firearm model not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get part categories for a firearm model
      tags:
      - Firearm Models
      - Part Categories
  /firearm-models/{id}/categories-hierarchy:
    get:
      consumes:
      - application/json
      description: Retrieves all part categories associated with a specific firearm
        model in a hierarchical structure
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Hierarchical array of part categories with required status
          schema:
            items:
              $ref: '#/definitions/handlers.CategoryWithRequiredStatusHierarchy'
            type: array
        "400":
          description: Invalid firearm model ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Firearm model not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get hierarchical categories for a firearm model
      tags:
      - Firearm Models
      - Part Categories
  /firearm-models/{id}/categories/{category_id}:
    delete:
      consumes:
      - application/json
      description: Removes the association between a part category and a firearm model
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      - description: Part Category ID
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Relationship not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove a category from a firearm model
      tags:
      - Firearm Models
      - Part Categories
    post:
      consumes:
      - application/json
      description: Associates a part category with a firearm model
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      - description: Part Category ID
        in: path
        name: category_id
        required: true
        type: integer
      - description: Relationship parameters
        in: body
        name: relationship
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Firearm model or part category not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Relationship already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add a category to a firearm model
      tags:
      - Firearm Models
      - Part Categories
    put:
      consumes:
      - application/json
      description: Updates the relationship between a firearm model and a part category
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      - description: Part Category ID
        in: path
        name: category_id
        required: true
        type: integer
      - description: Updated relationship parameters
        in: body
        name: relationship
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Relationship not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a firearm model-category relationship
      tags:
      - Firearm Models
      - Part Categories
  /listings:
    get:
      consumes:
      - application/json
      description: Get a list of all product listings in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductListing'
            type: array
      summary: Get all product listings
      tags:
      - Product Listings
    post:
      consumes:
      - application/json
      description: Add a new product listing to the database
      parameters:
      - description: Product Listing Info
        in: body
        name: listing
        required: true
        schema:
          $ref: '#/definitions/models.ProductListing'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductListing'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new product listing
      tags:
      - Product Listings
  /listings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific product listing
      parameters:
      - description: Product Listing ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a product listing
      tags:
      - Product Listings
    get:
      consumes:
      - application/json
      description: Get details of a specific product listing
      parameters:
      - description: Product Listing ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductListing'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a product listing by ID
      tags:
      - Product Listings
    put:
      consumes:
      - application/json
      description: Update details of a specific product listing
      parameters:
      - description: Product Listing ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Product Listing Info
        in: body
        name: listing
        required: true
        schema:
          $ref: '#/definitions/models.ProductListing'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductListing'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a product listing
      tags:
      - Product Listings
  /listings/{id}/availability:
    patch:
      consumes:
      - application/json
      description: Update the availability and optionally the price of a specific
        listing
      parameters:
      - description: Product Listing ID
        in: path
        name: id
        required: true
        type: integer
      - description: Availability Update Info
        in: body
        name: availability
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProductListing'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update listing availability
      tags:
      - Product Listings
  /listings/part/{partId}:
    get:
      consumes:
      - application/json
      description: Get all product listings for a specific part
      parameters:
      - description: Part ID
        in: path
        name: partId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductListing'
            type: array
      summary: Get listings by part ID
      tags:
      - Product Listings
  /listings/prebuilt/{prebuiltId}:
    get:
      consumes:
      - application/json
      description: Get all product listings for a specific prebuilt firearm
      parameters:
      - description: Prebuilt Firearm ID
        in: path
        name: prebuiltId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductListing'
            type: array
      summary: Get listings by prebuilt ID
      tags:
      - Product Listings
  /listings/seller/{sellerId}:
    get:
      consumes:
      - application/json
      description: Get all product listings for a specific seller
      parameters:
      - description: Seller ID
        in: path
        name: sellerId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProductListing'
            type: array
      summary: Get listings by seller
      tags:
      - Product Listings
  /part-categories:
    get:
      consumes:
      - application/json
      description: Retrieves all part categories with optional parent-child relationships
      parameters:
      - description: Whether to include child categories recursively
        in: query
        name: recursive
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PartCategory'
            type: array
        "500":
          description: Error message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all part categories
      tags:
      - Part Categories
    post:
      consumes:
      - application/json
      description: Creates a new part category
      parameters:
      - description: Part Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.PartCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PartCategory'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new part category
      tags:
      - Part Categories
  /part-categories/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a part category
      parameters:
      - description: Part Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a part category
      tags:
      - Part Categories
    get:
      consumes:
      - application/json
      description: Retrieves a single part category by ID
      parameters:
      - description: Part Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PartCategory'
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get part category by ID
      tags:
      - Part Categories
    put:
      consumes:
      - application/json
      description: Updates an existing part category
      parameters:
      - description: Part Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Part Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.PartCategory'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PartCategory'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a part category
      tags:
      - Part Categories
  /part-categories/firearm/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves all part categories associated with a specific firearm
        model
      parameters:
      - description: Firearm Model ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter by required status (true=required, false=optional, omit=both)
        in: query
        name: required
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Array of part categories with required status
          schema:
            items:
              type: object
            type: array
        "400":
          description: Invalid firearm model ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Firearm model not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get part categories for a firearm model
      tags:
      - Firearm Models
      - Part Categories
  /part-hierarchy:
    get:
      consumes:
      - application/json
      description: Get a hierarchical view of part categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PartItem'
            type: array
      summary: Get part hierarchy
      tags:
      - Parts
  /parts:
    get:
      consumes:
      - application/json
      description: Get all parts with optional filtering by category, subcategory,
        or category_id
      parameters:
      - description: Filter by category name
        in: query
        name: category
        type: string
      - description: Filter by subcategory name
        in: query
        name: subcategory
        type: string
      - description: Filter by part category ID (new schema)
        in: query
        name: category_id
        type: integer
      - description: Filter by prebuilt status
        in: query
        name: is_prebuilt
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Part'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all parts
      tags:
      - Parts
    post:
      consumes:
      - application/json
      description: Create a new part in the database
      parameters:
      - description: Part object to create
        in: body
        name: part
        required: true
        schema:
          $ref: '#/definitions/models.Part'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Part'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a part
      tags:
      - Parts
  /parts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific part
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Part not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a part
      tags:
      - Parts
    get:
      consumes:
      - application/json
      description: Get a specific part by its ID
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Part'
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Part not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get part by ID
      tags:
      - Parts
    put:
      consumes:
      - application/json
      description: Update an existing part
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated part object
        in: body
        name: part
        required: true
        schema:
          $ref: '#/definitions/models.Part'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Part'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Part not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a part
      tags:
      - Parts
  /parts/{id}/compatible:
    get:
      consumes:
      - application/json
      description: Get all parts compatible with a specific part
      parameters:
      - description: Part ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Part'
            type: array
        "400":
          description: Invalid ID format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Part not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get compatible parts
      tags:
      - Parts
      - Compatibility
  /parts/category/{category}:
    get:
      consumes:
      - application/json
      description: Get all parts in a specific category
      parameters:
      - description: Category name
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Part'
            type: array
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get parts by category
      tags:
      - Parts
  /parts/compatible-models:
    get:
      consumes:
      - application/json
      description: Get a list of unique firearm models that parts are compatible with
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Get compatible firearm models
      tags:
      - Parts
  /prebuilt-firearms:
    get:
      consumes:
      - application/json
      description: Get a list of all prebuilt firearms in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PrebuiltFirearm'
            type: array
      summary: Get all prebuilt firearms
      tags:
      - Prebuilt Firearms
    post:
      consumes:
      - application/json
      description: Add a new prebuilt firearm to the database
      parameters:
      - description: Prebuilt Firearm Info
        in: body
        name: firearm
        required: true
        schema:
          $ref: '#/definitions/models.PrebuiltFirearm'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PrebuiltFirearm'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new prebuilt firearm
      tags:
      - Prebuilt Firearms
  /prebuilt-firearms/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific prebuilt firearm
      parameters:
      - description: Prebuilt Firearm ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a prebuilt firearm
      tags:
      - Prebuilt Firearms
    get:
      consumes:
      - application/json
      description: Get details of a specific prebuilt firearm
      parameters:
      - description: Prebuilt Firearm ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PrebuiltFirearm'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a prebuilt firearm by ID
      tags:
      - Prebuilt Firearms
    put:
      consumes:
      - application/json
      description: Update details of a specific prebuilt firearm
      parameters:
      - description: Prebuilt Firearm ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Prebuilt Firearm Info
        in: body
        name: firearm
        required: true
        schema:
          $ref: '#/definitions/models.PrebuiltFirearm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PrebuiltFirearm'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a prebuilt firearm
      tags:
      - Prebuilt Firearms
  /prebuilt-firearms/model/{modelId}:
    get:
      consumes:
      - application/json
      description: Get all prebuilt firearms for a specific firearm model
      parameters:
      - description: Firearm Model ID
        in: path
        name: modelId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PrebuiltFirearm'
            type: array
      summary: Get prebuilt firearms by model
      tags:
      - Prebuilt Firearms
  /sellers:
    get:
      consumes:
      - application/json
      description: Get a list of all sellers in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Seller'
            type: array
      summary: Get all sellers
      tags:
      - Sellers
    post:
      consumes:
      - application/json
      description: Add a new seller to the database
      parameters:
      - description: Seller Info
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/models.Seller'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Seller'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new seller
      tags:
      - Sellers
  /sellers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a seller
      tags:
      - Sellers
    get:
      consumes:
      - application/json
      description: Get details of a specific seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Seller'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a seller by ID
      tags:
      - Sellers
    put:
      consumes:
      - application/json
      description: Update details of a specific seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Seller Info
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/models.Seller'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Seller'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a seller
      tags:
      - Sellers
  /sellers/{id}/affiliate-status:
    patch:
      consumes:
      - application/json
      description: Update the affiliate status of a specific seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Affiliate Status Update Info
        in: body
        name: status
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Seller'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update seller affiliate status
      tags:
      - Sellers
  /user-suggestions:
    get:
      consumes:
      - application/json
      description: Get a list of all user suggestions in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserSuggestion'
            type: array
      summary: Get all user suggestions
      tags:
      - User Suggestions
    post:
      consumes:
      - application/json
      description: Add a new user suggestion to the database
      parameters:
      - description: User Suggestion Info
        in: body
        name: suggestion
        required: true
        schema:
          $ref: '#/definitions/models.UserSuggestion'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserSuggestion'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user suggestion
      tags:
      - User Suggestions
  /user-suggestions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user suggestion
      parameters:
      - description: User Suggestion ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user suggestion
      tags:
      - User Suggestions
    get:
      consumes:
      - application/json
      description: Get details of a specific user suggestion
      parameters:
      - description: User Suggestion ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSuggestion'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a user suggestion by ID
      tags:
      - User Suggestions
    put:
      consumes:
      - application/json
      description: Update details of a specific user suggestion
      parameters:
      - description: User Suggestion ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated User Suggestion Info
        in: body
        name: suggestion
        required: true
        schema:
          $ref: '#/definitions/models.UserSuggestion'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSuggestion'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a user suggestion
      tags:
      - User Suggestions
  /user-suggestions/{id}/status:
    patch:
      consumes:
      - application/json
      description: Update the status of a specific user suggestion
      parameters:
      - description: User Suggestion ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status Update Info
        in: body
        name: status
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSuggestion'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user suggestion status
      tags:
      - User Suggestions
  /user-suggestions/status/{status}:
    get:
      consumes:
      - application/json
      description: Get all user suggestions with a specific status
      parameters:
      - description: Suggestion Status
        enum:
        - pending
        - approved
        - rejected
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserSuggestion'
            type: array
      summary: Get user suggestions by status
      tags:
      - User Suggestions
schemes:
- http
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
